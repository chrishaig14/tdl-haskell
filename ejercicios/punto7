Currying

Currying es el proceso de transformar una funcion que podria tomar muchos argumentos en otra que toma un solo argumento y devuelve una funcion siempre que aun le falten argumentos.
En Haskell, por ejemplo, todas las funciones que, en principio necesitan mas de un parametro,. utilizan currying, ya que las funciones solo pueden recibir un unico parametro. 
Entonces, al aplicar currying, si tenemos una funcion que recibe dos parametros y devuelve otro, en realidad lo que tenemos es una funcion que recibe un parametro, y devuelve otra funcion que recibe un parametro y, finalmente, devuelve el resultado.
Gracias a esto, podemos utilizar funciones con menos parametros de los que recibe, y generar funciones evaluadas parcialmente.

Ilustramos este concepto con un ejemplo sencillo en haskell, en el cual generamos una funcion MultTHree que necesita tres parametros numericos y devuelve la multiplicacion de los tres.


multThree :: (Num a) => a -> a -> a -> a
multThree x y z = x * y * z

> multThree 3 5 9
135

Gracias al Currying podemos llamar a la funcion multThree y generar otra funcion multTwoWithNine que tome dos parametros y devuelve la multiplicacion de ellos por 9.

let multTwoWithNine = multThree 9

> multTwoWithNine 2 3 
54
